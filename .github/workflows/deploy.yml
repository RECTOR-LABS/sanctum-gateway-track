name: Deploy to VPS

on:
  push:
    branches:
      - main
      - submission  # Also deploy submission branch
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    name: Build and Deploy to Production VPS
    runs-on: ubuntu-latest

    steps:
      # ============================================
      # Step 1: Checkout code
      # ============================================
      - name: Checkout code
        uses: actions/checkout@v4

      # ============================================
      # Step 2: Setup Node.js
      # ============================================
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            src/backend/package-lock.json
            src/frontend/package-lock.json

      # ============================================
      # Step 3: Build Backend (if fails, stops here)
      # ============================================
      - name: Build Backend
        run: |
          echo "üîß Building backend..."
          cd src/backend
          npm ci --production=false
          npm run build
          echo "‚úÖ Backend build successful!"

      # ============================================
      # Step 4: Build Frontend (if fails, stops here)
      # ============================================
      - name: Build Frontend
        run: |
          echo "üé® Building frontend..."
          cd src/frontend
          npm ci --production=false
          npm run build
          echo "‚úÖ Frontend build successful!"

      # ============================================
      # Step 5: Create deployment artifact
      # ============================================
      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."

          # Create tar.gz with built files
          tar -czf deployment.tar.gz \
            src/backend/dist \
            src/backend/node_modules \
            src/backend/package.json \
            src/backend/package-lock.json \
            src/frontend/.next \
            src/frontend/node_modules \
            src/frontend/package.json \
            src/frontend/package-lock.json \
            src/frontend/next.config.ts \
            src/frontend/public

          echo "‚úÖ Deployment package created ($(du -h deployment.tar.gz | cut -f1))"

      # ============================================
      # Step 6: Upload artifact (1-day retention)
      # ============================================
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: deployment.tar.gz
          retention-days: 1  # Auto-delete after 1 day

      # ============================================
      # Step 7: Transfer artifact to VPS
      # ============================================
      - name: Transfer to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: deployment.tar.gz
          target: /tmp/sanctum-deployment/

      # ============================================
      # Step 8: Deploy on VPS
      # ============================================
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            echo "üöÄ Starting deployment on VPS..."

            # Load NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

            # Navigate to project directory
            cd ~/sanctum-gateway-track

            # Pull latest changes (for non-build files like .env, configs)
            echo "üì• Pulling latest changes from GitHub..."
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}

            # Extract deployment package
            echo "üì¶ Extracting deployment package..."
            if [ -f /tmp/sanctum-deployment/deployment.tar.gz ]; then
              tar -xzf /tmp/sanctum-deployment/deployment.tar.gz -C ~/sanctum-gateway-track/
              echo "‚úÖ Deployment package extracted!"

              # Clean up
              rm -f /tmp/sanctum-deployment/deployment.tar.gz
            else
              echo "‚ùå Deployment package not found!"
              exit 1
            fi

            # Restart services
            echo "‚ôªÔ∏è  Restarting services..."
            pm2 restart sanctum-backend
            pm2 restart sanctum-frontend

            # Save PM2 configuration
            pm2 save

            # Verify deployment
            echo "‚úÖ Deployment complete!"
            pm2 list

      # ============================================
      # Step 9: Deployment Status
      # ============================================
      - name: Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Frontend: https://sanctum.rectorspace.com"
            echo "üîå Backend: https://api.sanctum.rectorspace.com"
            echo "üìä Build Info: https://sanctum.rectorspace.com/api/build-info"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Check logs above for errors"
            echo "üí° Production is still running the previous working build"
            exit 1
          fi
